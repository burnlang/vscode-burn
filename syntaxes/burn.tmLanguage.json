{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Burn",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#classes" },
    { "include": "#functions" },
    { "include": "#types" },
    { "include": "#structs" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.burn",
          "match": "//.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.burn",
          "match": "\\b(if|else|while|for|return|import|continue|break)\\b"
        },
        {
          "name": "keyword.declaration.burn",
          "match": "\\b(fun|var|const|def|class)\\b"
        },
        {
          "name": "constant.language.burn",
          "match": "\\b(true|false|nil)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.burn",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.burn",
          "match": "\\\\(n|t|r|\"|\\\\)"
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric.burn",
      "match": "\\b([0-9]+(\\.[0-9]+)?|\\.[0-9]+)\\b"
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.burn",
          "match": "\\+|\\-|\\*|/|%"
        },
        {
          "name": "keyword.operator.assignment.burn",
          "match": "=|\\+=|\\-=|\\*=|/="
        },
        {
          "name": "keyword.operator.comparison.burn",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.burn",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.range.burn",
          "match": "\\.\\."
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.burn",
          "match": ";"
        },
        {
          "name": "punctuation.separator.parameter.burn",
          "match": ","
        },
        {
          "name": "punctuation.separator.key-value.burn",
          "match": ":"
        },
        {
          "name": "punctuation.accessor.burn",
          "match": "\\."
        },
        {
          "name": "punctuation.definition.block.burn",
          "match": "{|}"
        },
        {
          "name": "punctuation.definition.parameters.begin.burn",
          "match": "\\("
        },
        {
          "name": "punctuation.definition.parameters.end.burn",
          "match": "\\)"
        },
        {
          "name": "punctuation.definition.array.begin.burn",
          "match": "\\["
        },
        {
          "name": "punctuation.definition.array.end.burn",
          "match": "\\]"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.declaration.burn",
          "begin": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.burn" },
            "2": { "name": "entity.name.type.class.burn" }
          },
          "end": "\\}",
          "patterns": [
            { "include": "#comments" },
            { "include": "#functions" },
            { "include": "#keywords" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#operators" },
            { "include": "#punctuation" },
            { "include": "#types" },
            { "include": "#identifiers" }
          ]
        },
        {
          "name": "meta.class.method-call.burn",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\.(create|[a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.type.class.burn" },
            "2": { "name": "entity.name.function.method.burn" }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.declaration.burn",
          "match": "\\b(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "keyword.declaration.burn" },
            "2": { "name": "entity.name.function.burn" }
          }
        },
        {
          "name": "entity.name.function.burn",
          "match": "\\b(print|toString|input|power|isEven|join|toMilliseconds|fromMilliseconds|createTime)\\s*\\("
        },
        {
          "name": "meta.function-call.burn",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.burn" }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "meta.type.annotation.burn",
          "match": ":\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.burn" }
          }
        },
        {
          "name": "storage.type.primitive.burn",
          "match": "\\b(int|float|string|bool|Time|Human|Dog)\\b"
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "name": "meta.struct.declaration.burn",
          "begin": "\\b(def)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.burn" },
            "2": { "name": "entity.name.type.struct.burn" }
          },
          "end": "\\}",
          "patterns": [
            { "include": "#comments" },
            {
              "name": "meta.field.declaration.burn",
              "match": "\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
              "captures": {
                "1": { "name": "variable.other.property.burn" },
                "2": { "name": "storage.type.burn" }
              }
            },
            { "include": "#punctuation" }
          ]
        },
        {
          "name": "meta.struct.initialization.burn",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            { "include": "#comments" },
            {
              "name": "meta.field.initialization.burn",
              "match": "\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
              "captures": {
                "1": { "name": "variable.other.property.burn" }
              }
            },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#keywords" },
            { "include": "#operators" },
            { "include": "#punctuation" },
            { "include": "#identifiers" }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.declaration.burn",
          "match": "\\b(var|const)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "keyword.declaration.burn" },
            "2": { "name": "variable.other.declaration.burn" }
          }
        },
        {
          "name": "variable.other.property.access.burn",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "variable.other.burn" },
            "2": { "name": "variable.other.property.burn" }
          }
        },
        {
          "name": "variable.other.burn",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.burn"
}
